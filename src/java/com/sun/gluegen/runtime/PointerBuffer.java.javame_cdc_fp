/*
 * Copyright (c) 2003 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * - Redistribution of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * 
 * - Redistribution in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of Sun Microsystems, Inc. or the names of
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * This software is provided "AS IS," without a warranty of any kind. ALL
 * EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES,
 * INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE OR NON-INFRINGEMENT, ARE HEREBY EXCLUDED. SUN
 * MICROSYSTEMS, INC. ("SUN") AND ITS LICENSORS SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES. IN NO EVENT WILL SUN OR
 * ITS LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR
 * DIRECT, INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE
 * DAMAGES, HOWEVER CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY,
 * ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF
 * SUN HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 * 
 * You acknowledge that this software is not designed or intended for use
 * in the design, construction, operation or maintenance of any nuclear
 * facility.
 */

package com.sun.gluegen.runtime;

import java.nio.*;

public class PointerBuffer {
  private ByteBuffer   bb;
  private IntBuffer    ib;

  public PointerBuffer(ByteBuffer bb) {
    this.bb = bb;
    this.ib = bb.asIntBuffer();
  }

  public ByteBuffer getBuffer() {
    return bb;
  }

  /** Retrieves the long at the specified slot (8-byte offset). */
  public long get(int slot) {
    slot = slot << 1 ; // 8-byte to 4-byte offset
    long lo = 0x00000000FFFFFFFFL & ( (long) ib.get(slot)   );
    long hi = 0x00000000FFFFFFFFL & ( (long) ib.get(slot+1) );
    if(BufferFactory.isLittleEndian()) {
        return hi << 32 | lo ;
    }
    return lo << 32 | hi ;
  }

  /** Puts a long at the specified slot (8-byte offset). */
  public void put(int slot, long v) {
    slot = slot << 1 ; // 8-byte to 4-byte offset
    int lo = (int) ( ( v       ) & 0x00000000FFFFFFFFL ) ;
    int hi = (int) ( ( v >> 32 ) & 0x00000000FFFFFFFFL ) ;
    if(BufferFactory.isLittleEndian()) {
        ib.put(slot, lo);
        ib.put(slot+1, hi);
    } else {
        ib.put(slot, hi);
        ib.put(slot+1, lo);
    }
  }
}
